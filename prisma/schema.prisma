generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("TESTADR_MONGODB_URL")
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  location      String?
  // Optional for WebAuthn support
  // Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
// model Authenticator {
//   credentialID         String  @id @map("_id")
//   userId               String  @db.ObjectId
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?
 
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
//   @@unique([userId, credentialID])
// }

model otps {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  createdAt Json?
  /// Field referred in an index, but found no data to define the type.
  email     Json?  @unique(map: "email_1")

  @@index([createdAt], map: "createdAt_1")
}

model userprofilemodels {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  userId Json?  @unique(map: "userId_1")
}

model userprofiles {
  id                         String   @id @default(auto()) @map("_id") @db.ObjectId
  v                          Int      @map("__v")
  createdAt                  DateTime @db.Date
  firstName                  String
  image                      String
  lastName                   String
  location                   String?
  locationDistancePreference Int?
  name                       String
  phone                      String
  updatedAt                  DateTime @db.Date
  userId                     String   @unique(map: "userId_1")
}

model users {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  v         Int      @map("__v")
  createdAt DateTime @db.Date
  email     String   @unique(map: "email_1")
  updatedAt DateTime @db.Date
}

//======================================================================================//

// prisma db pull --force

// model otps {
//   id        String @id @default(auto()) @map("_id") @db.ObjectId
//   /// Field referred in an index, but found no data to define the type.
//   createdAt Json?
//   /// Field referred in an index, but found no data to define the type.
//   email     Json?  @unique(map: "email_1")

//   @@index([createdAt], map: "createdAt_1")
// }

// model userprofilemodels {
//   id     String @id @default(auto()) @map("_id") @db.ObjectId
//   /// Field referred in an index, but found no data to define the type.
//   userId Json?  @unique(map: "userId_1")
// }

// model userprofiles {
//   id                         String   @id @default(auto()) @map("_id") @db.ObjectId
//   v                          Int      @map("__v")
//   createdAt                  DateTime @db.Date
//   firstName                  String
//   image                      String
//   lastName                   String
//   location                   String?
//   locationDistancePreference Int?
//   name                       String
//   phone                      String
//   updatedAt                  DateTime @db.Date
//   userId                     String   @unique(map: "userId_1")
// }

// model users {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   v         Int      @map("__v")
//   createdAt DateTime @db.Date
//   email     String   @unique(map: "email_1")
//   updatedAt DateTime @db.Date
// }
